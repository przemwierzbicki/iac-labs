# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./example-app

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry Action
      # You may pin to the exact commit or the version.
      # uses: snok/install-poetry@d45b6d76012debf457ab49dffc7fb7b2efe8071d
      uses: snok/install-poetry@v1.3.3
#      with:
        # The Poetry version to install
#        version: # default is latest
        # Whether Poetry should create a virtualenv or not
#        virtualenvs-create: # optional, default is true
        # Whether Poetry should create virtualenvs in the project directory or not
#        virtualenvs-in-project: # optional, default is false
        # The Poetry virtualenv path
#        virtualenvs-path: # optional, default is {cache-dir}/virtualenvs
        # Whether to install many packages at once or one by one. This can fix PyPI DNS resolution errors, but also slows down the installation
#        installer-parallel: # optional, default is true
        # Arguments passed directly to the Poetry installation script. For example --force.
#        installation-arguments: # optional
    - name: Install dependencies
      run: |
        poetry install
    - name: Lint
      run: |
        poetry run task lint
    - name: Test
      run: |
        poetry run task test
